upstream node_upstream_geoserver {
  server localhost:8080 fail_timeout=10;
}

proxy_cache_path /tmp/tilescache levels=1:2 keys_zone=wms-service:10m max_size=100m inactive=336h use_temp_path=off;

log_format custom_cache_log '[$time_local] [Cache:$upstream_cache_status] [$host] [Remote_Addr: $remote_addr] - $remote_user - $server_name to: $upstream_addr: "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" ' ;

server {
    listen       80;
    server_name  localhost;

    access_log /var/log/nginx/access.log custom_cache_log;
    error_log /var/log/nginx/error.log;   
    charset utf-8;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    # Enable/Disabled this location block if you dont want to allow access to web/tests/restapi
    location ~ .(web|rest|openlayers3|j_spring_security|j_spring_security|Test).* {
        # If method is not a valid method
        if ($request_method !~ ^(GET|POST|PUT|HEAD|OPTIONS|DELETE|PATCH)$ ) {                                                 
          return 444;
        }

        # Pre-common-config
        add_header CC-X-Request-ID $request_id;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # If remote_addr is not a local/network allowed addr, then reject request
        if ($remote_addr !~ ^(?:10|127|172\.(?:1[6-9]|2[0-9]|3[01])|192\.168)\..*) { 
          return 403 'ip: $remote_addr denied\n'; 
        }

        proxy_pass http://node_upstream_geoserver;
    }

    # Enable/Disabled this location block if you dont want to allow access to OGC Services like
    # WFS or WCS, etc
    location ~ .(wfs|wcs|ows|gwc).* {
        # If method is not a valid method
        if ($request_method !~ ^(GET|POST|PUT|HEAD|OPTIONS|DELETE|PATCH)$ ) {                                                 
          return 444;
        }

        # Pre-common-config
        add_header CC-X-Request-ID $request_id;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # If remote_addr is not a local/network allowed addr, then reject request
        if ($remote_addr !~ ^(?:10|127|172\.(?:1[6-9]|2[0-9]|3[01])|192\.168)\..*) { 
          return 403 'ip: $remote_addr denied\n'; 
        }

        proxy_pass http://node_upstream_geoserver;
    }

    # Location block that allows to Cache WMS service calls
    location ~ .wms.* {
        # If method is not a valid method
        if ($request_method !~ ^(GET|POST|PUT|HEAD|OPTIONS|DELETE|PATCH)$ ) {                                                 
          return 444;
        }

        # Pre-common-config
        add_header CC-X-Request-ID $request_id;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # If request is a not a WMS service, then we dont cache anything
        if ($request_uri !~ .*wms.*$) { 
          return 403 'uri not allowed: $request_uri\n';
        }
      
        # CORS settings
        #if ($http_origin ~* (https://(.*)\.sample\.geotekne\.local)) {
          add_header Access-Control-Allow-Origin $http_origin;
          add_header Access-Control-Allow-Credentials "true";
        #}
        # Strip out query param "timestamp"
        if ($args ~ (.*)&timestamp=[^&]*(.*)) {
          set $args $1$2;
        }
        # Use the "wms-service" cache defined above
        proxy_cache wms-service;
        # Create a unique cache key
        proxy_cache_key "$scheme$request_method$host$uri$is_args$args";
        # Only cache for 10080mins (1 week)
        proxy_cache_valid 10080m;
        add_header X-GG-Cache-Status $upstream_cache_status;
        add_header X-GG-Cache-Date $upstream_http_date;      
        proxy_cache_revalidate on;

        #proxy_connect_timeout       300;
        #proxy_send_timeout          300;
        #proxy_read_timeout          300;
        #send_timeout                300;
      
        proxy_pass http://node_upstream_geoserver;
    }

    error_page  404              /404.html;
    location = /404.html {
        root   /usr/share/nginx/html;
    }

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

}
